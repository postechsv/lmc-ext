fmod PETERSON-SYNTAX is
  sorts Slot EmptySlot OccupiedSlot .
  sorts PartitionItem PartitionSet Partition .
  sorts EmptyPartitionSet NonemptyPartitionSet EmptyPartition NonemptyPartition .
  sort PartitionList .
  sorts EmptyPartitionList NonemptyPartitionList .

  subsorts EmptySlot OccupiedSlot < Slot .
  subsort PartitionItem < NonemptyPartitionSet < PartitionSet .
  subsort EmptyPartitionSet < PartitionSet .
  subsorts EmptyPartition NonemptyPartition < Partition .
  subsort Partition < PartitionList .
  subsort EmptyPartition < EmptyPartitionList < PartitionList .
  subsort NonemptyPartition < NonemptyPartitionList < PartitionList .

  op empty : -> EmptyPartitionSet [ctor] .
  op o : -> PartitionItem [ctor] .

  op [_] : PartitionSet -> Slot [ctor] .
  op [_] : EmptyPartitionSet -> EmptySlot [ctor] .
  op [_] : PartitionItem -> OccupiedSlot [ctor] .

  op __ : PartitionSet PartitionSet -> PartitionSet [assoc comm ctor id: empty] .
  op __ : EmptyPartitionSet EmptyPartitionSet -> EmptyPartitionSet [assoc comm ctor id: empty] .
  op __ : NonemptyPartitionSet NonemptyPartitionSet -> NonemptyPartitionSet [assoc comm ctor id: empty] .

  op <_|_> : Slot PartitionSet -> Partition [ctor] .
  op <_|_> : EmptySlot EmptyPartitionSet -> EmptyPartition [ctor] .
  op <_|_> : OccupiedSlot EmptyPartitionSet -> NonemptyPartition [ctor] .
  op <_|_> : EmptySlot NonemptyPartitionSet -> NonemptyPartition [ctor] .
  op <_|_> : OccupiedSlot NonemptyPartitionSet -> NonemptyPartition [ctor] .

  op nil : -> PartitionList [ctor] .
  op __ : PartitionList PartitionList -> PartitionList [assoc ctor id: nil] .
  op __ : EmptyPartitionList EmptyPartitionList -> EmptyPartitionList [assoc ctor id: nil] .
  op __ : NonemptyPartitionList NonemptyPartitionList -> NonemptyPartitionList [assoc ctor id: nil] .
endfm

mod PETERSON is
endm

load symbolic-checker

(mod PETERSON-SATISFACTION1 is
  protecting PETERSON-SYNTAX .

  vars PS1 PS2 PSM1 PSM2 : PartitionSet .
  var PI : PartitionItem .
  var PL : PartitionList .
  var EPL : EmptyPartitionList .

  rl [ascend-1] : < [PS1] | PI PSM1 > < [PS2] | PSM2 > => < [PS1] | PSM1 > < [PI] | PS2 PSM2 > [narrowing] .
  rl [ascend-2] : < [PS1] | empty > < [empty] | empty > EPL => < [empty] | empty > < [PS1] | empty > EPL [narrowing] .
  rl [exit-1] : < [PS1] | PSM1 > PL < [PS] | PSM2 > => < [PS] | PS1 PSM1 > PL < [empty] | PSM2 > [narrowing] .
  rl [exit-2] : < [PS1] | PSM1 > PL < [PS2] | PS PSM2 > => < [PS] | PS1 PSM1 > PL < [PS2] | PSM2 > [narrowing] .
endm)