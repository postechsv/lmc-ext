--- Lamport's Bakery protocol in Maude.
--- From: All About Maude - A High-Performance Logical Framework. 

fmod NUMBER is
  sorts Number . 
  op 0 : -> Number [ctor] .
  op s : -> Number [ctor] .
  op __ : Number Number -> Number [ctor comm assoc id: 0] .
endfm

fmod BAKERY-SYNTAX is 
  protecting NUMBER .

  sorts ModeIdle ModeWait ModeCrit Mode . 
  subsorts ModeIdle ModeWait ModeCrit < Mode . 
  sorts ProcIdle ProcWait Proc ProcIdleSet ProcWaitSet ProcSet . 
  subsorts ProcIdle < ProcIdleSet . 
  subsorts ProcWait < ProcWaitSet . 
  subsorts ProcIdle ProcWait < Proc < ProcSet . 
  subsorts ProcIdleSet < ProcWaitSet < ProcSet . 
  
  op idle : -> ModeIdle . 
  op wait : Number -> ModeWait . 
  op crit : Number -> ModeCrit . 
  op [_] : ModeIdle -> ProcIdle . 
  op [_] : ModeWait -> ProcWait . 
  op [_] : Mode -> Proc . 
  op none : -> ProcIdleSet . 
  op __ : ProcIdleSet ProcIdleSet -> ProcIdleSet [assoc comm] . 
  op __ : ProcWaitSet ProcWaitSet -> ProcWaitSet [assoc comm] .
  op __ : ProcSet ProcSet -> ProcSet [assoc comm] .

  sort Conf . 
  op _;_;_ : Number Number ProcSet -> Conf .
endfm

mod BAKERY is
  protecting BAKERY-SYNTAX . 
  
  var PS : ProcSet .  vars N M : Number . 
  
  rl [wake] : N ; M ; [idle] PS    => s N ; M ; [wait(N)] PS [narrowing] .
  rl [crit] : N ; M ; [wait(M)] PS => N ; M ; [crit(M)] PS [narrowing] .
  rl [exit] : N ; M ; [crit(M)] PS => N ; s M ; [idle] PS [narrowing] .
endm

load symbolic-checker

--- prop definitions for bakery
(mod BAKERY-SATISFACTION1 is
  pr BAKERY .
  pr SYMBOLIC-CHECKER .
  pr STATE-SYNTAX .

  subsort Conf < State .

  ops ever-wait? ever-crit? : -> Prop .
  op enabled? : -> Prop [metadata "incomplete(false)"] .

  vars N M : Number . vars PS : ProcSet . 

  eq s N ; M ; PS |= ever-wait? = true [variant] . 
  eq 0 ; M ; PS    |= ever-wait? = false [variant] . 
  eq N ; s M ; PS |= ever-crit? = true [variant] .
  eq N ; 0 ; PS    |= ever-crit? = false [variant] . 

  eq N ; M ; [idle] PS |= enabled? = true [variant] .
  eq N ; M ; [wait(M)] PS |= enabled? = true [variant] .
  eq N ; M ; [crit(M)] PS |= enabled? = true [variant] .
endm)

set print attribute on .
set verbose off .

*** true
(lfmc [20] N ; N ; [idle] [idle] [idle] |= [] (ever-wait? -> <> ever-crit?) .)

*** deadlock counterexample
(lfmc N ; M ; IS:ProcIdleSet |= [] (enabled? -> (ever-wait? -> <> ever-crit?)) .)

*** spurious counterexample
(lfmc N ; M ; WS:ProcWaitSet |= [] (ever-wait? -> <> ever-crit?) .)

(mod BAKERY-SATISFACTION2 is
  pr BAKERY .
  pr SYMBOLIC-CHECKER .
  pr STATE-SYNTAX .

  subsort Conf < State .

  op mutex : -> Prop . 

  var WS : ProcWaitSet . var IS : ProcIdleSet . var PS : ProcSet . 
  vars N M M1 M2 : Number .

--- NOTE: ProcIdleSet < ProcWaitSet
  eq N ; M ; WS |= mutex = true [variant] .
  eq N ; M ; [crit(M1)] WS |= mutex = true [variant] .
  eq N ; M ; [crit(M1)] [crit(M2)] PS |= mutex = false [variant] .
endm)